---
description: When pixelPolish MCP is invoked
globs: 
alwaysApply: false
---
# PixelPolish MCP Server Cursor Rule

## Auto-Serve and Wait for UI/UX Modification Requests

When the user mentions "pixelpolish", "ui analysis", "serve ui portal", or requests UI/UX modifications, automatically execute this workflow:

### 1. Initial Server Setup
```
Call MCP tool: serve_vite_app
Parameters:
- port: 8080 (default)
- dist_path: "/Users/earlpotters/Documents/ai-projects/PixelPolish/ui-portal/dist" (default)
```

### 2. Consecutive Wait Loop (5 iterations)
**IMMEDIATELY** after `serve_vite_app` succeeds, automatically execute the following wait commands consecutively:

**Wait Attempt 1:**
```
Call MCP tool: wait
Parameters:
- duration_seconds: 50
- message: "Waiting for UI Portal API requests... (attempt 1/5)"
```

**Wait Attempt 2 (if attempt 1 times out):**
```
Call MCP tool: wait
Parameters:
- duration_seconds: 50
- message: "Waiting for UI Portal API requests... (attempt 2/5)"
```

**Wait Attempt 3 (if attempt 2 times out):**
```
Call MCP tool: wait
Parameters:
- duration_seconds: 50
- message: "Waiting for UI Portal API requests... (attempt 3/5)"
```

**Wait Attempt 4 (if attempt 3 times out):**
```
Call MCP tool: wait
Parameters:
- duration_seconds: 50
- message: "Waiting for UI Portal API requests... (attempt 4/5)"
```

**Wait Attempt 5 (if attempt 4 times out):**
```
Call MCP tool: wait
Parameters:
- duration_seconds: 50
- message: "Waiting for UI Portal API requests... (attempt 5/5 - FINAL)"
```

**Break Conditions:**
- **STOP IMMEDIATELY** if any `wait` call returns API request data (not a timeout message)
- Only continue to next wait attempt if previous attempt returned a timeout
- After 5 consecutive timeout attempts, stop waiting but keep server running
- If server fails to start, do not begin wait loop

### 3. Process API Request and Modify HTML File
When a valid API request is received from the `wait` tool:

1. **Extract the JSON payload** from the response
2. **Parse the UI modification data** with expected structure:
   ```json
   {
     "url": "http://localhost:8080/landing-page.html",
     "changes": {
       "textChanges": { "#selector": "new text" },
       "styleChanges": { 
         "selector": { "property": "value" } 
       },
       "htmlChanges": { "#selector": "<new html>" },
       "classChanges": { "#selector": ["class1", "class2"] },
       "hiddenElements": ["#selector1", "#selector2"]
     },
     "changeDescriptions": { ... }
   }
   ```

3. **Modify `./ui-portal/landing-page.html` file directly** by applying:
   - **Text Changes:** Update text content for specified selectors
   - **Style Changes:** Apply inline CSS styles or update style attributes
   - **HTML Changes:** Replace HTML content within specified elements
   - **Class Changes:** Add/remove CSS classes
   - **Hidden Elements:** Add `style="display: none"` or remove elements

4. **Write the updated HTML back to file** - Replace the old content completely
5. **Provide detailed feedback** on file modifications made

### 4. Response Format
Structure responses as:

```markdown
## PixelPolish UI Portal Status
‚úÖ Server started at http://localhost:8080
üîÑ Monitoring for API requests (attempt X/5)

## API Request Received
**Timestamp:** [timestamp]
**Target File:** ./ui-portal/landing-page.html
**Request Data:**
```json
[parsed json data]
```

## File Modifications Applied
**File Updated:** `./ui-portal/landing-page.html`

### Changes Made:
- **Text Changes:** X modifications
  - Updated #main-title: "New text content"
- **Style Changes:** X modifications  
  - Applied backgroundColor: #8059e4 to body
  - Applied backgroundColor: #ff4444 to #highlight-text
- **HTML Changes:** X modifications
  - Replaced content in #dynamic-content
- **Class Changes:** X modifications
- **Hidden Elements:** X elements hidden/removed

### File Status:
‚úÖ HTML file successfully updated and saved
üîÑ Changes are now live on the server
üåê Refresh http://localhost:8080/landing-page.html to see updates

## Next Steps
- Refresh your browser to see the changes
- Continue waiting for additional modification requests
- Use browser dev tools to verify changes applied correctly
```

### 5. Error Handling
- If server fails to start: Report error and suggest troubleshooting
- If 5 wait attempts timeout: Inform user no requests received, keep server running
- If invalid JSON received: Parse what's possible and ask for clarification

### 6. Keywords that Trigger This Rule
- "pixelpolish"
- "serve ui portal" 
- "start pixel polish"
- "ui analysis portal"
- "wait for ui requests"
- "modify ui based on analysis"

### 7. Automatic Sequential Actions
Execute these MCP tool calls in **EXACT ORDER** without user intervention:

1. **FIRST:** Call `serve_vite_app` with specified parameters
2. **IMMEDIATELY AFTER:** If server starts successfully, begin consecutive wait calls
3. **THEN:** Call `wait` (attempt 1/5) - if timeout, proceed to step 4
4. **THEN:** Call `wait` (attempt 2/5) - if timeout, proceed to step 5  
5. **THEN:** Call `wait` (attempt 3/5) - if timeout, proceed to step 6
6. **THEN:** Call `wait` (attempt 4/5) - if timeout, proceed to step 7
7. **THEN:** Call `wait` (attempt 5/5) - final attempt
8. **IF ANY WAIT RETURNS API DATA:** Skip remaining wait calls and process the request immediately

**Key Points:**
- Do NOT wait for user input between these calls
- Execute each `wait` call immediately after the previous one times out
- Stop the sequence early if any `wait` call returns API request data
- Keep server running regardless of wait results

### 8. Advanced Features
- **File System Integration:** Directly modify `./ui-portal/landing-page.html` based on JSON input
- **Live Updates:** Changes are immediately reflected when browser is refreshed
- **Comprehensive Change Support:**
  - Text content updates via `textChanges`
  - CSS style application via `styleChanges` 
  - HTML content replacement via `htmlChanges`
  - CSS class management via `classChanges`
  - Element visibility control via `hiddenElements`
- **JSON Structure Parsing:** Handle the specific format from UI Portal API
- **File Backup:** Consider backing up original file before modifications
- **Change Validation:** Verify selectors exist before applying changes
- **Error Recovery:** Handle malformed JSON or invalid selectors gracefully
- **Iterative Improvements:** After making changes, continue waiting for additional requests

**Expected JSON Format:**
```json
{
  "url": "http://localhost:8080/landing-page.html",
  "changes": {
    "textChanges": { "#selector": "new text" },
    "styleChanges": { "selector": { "property": "value" } },
    "htmlChanges": { "#selector": "<new html>" },
    "classChanges": { "#selector": ["class1", "class2"] },
    "hiddenElements": ["#selector1", "#selector2"]
  },
  "changeDescriptions": { "overallEffect": "description" }
}
```

This rule automates the entire workflow from server startup to processing UI modification requests and applying them directly to the HTML file.